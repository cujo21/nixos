This is a guide meant to be used with machines that have dual GPUs (Nvidia Optimus) 

The Entire config that can be used for copy pasting into a separte .nix file which would be imported into configuration.nix

{config, pkgs, ... }:

{ 
  
  boot.kernelParams = [ "amd_iommu=on" "iommu=pt" ]; 
  boot.kernelModules = [ "kvm-amd" "vfio_virqfd" "vfio_pci" "vfio_iommu_type1" "vfio" ];
  boot.extraModprobeConfig = ''
  options vfio-pci ids=10de:2560,10de:228e
  options kvm ignore_msrs=1
  '';
  boot.postBootCommands = ''
    # Enable VFIO on secondary GPU
    for DEV in "0000:01:00.0" "0000:01:00.1"; do
      echo "vfio-pci" > /sys/bus/pci/devices/$DEV/driver_override
    done
    modprobe -i vfio-pci
    # Setup Looking Glass shared memory object
    touch /dev/shm/looking-glass
    chown cujo:kvm /dev/shm/looking-glass
    chmod 660 /dev/shm/looking-glass
  '';



  users.users.cujo.extraGroups = [ "libvirtd" ];
  
  environment.systemPackages = with pkgs; [
    virt-manager
    virt-viewer
    spice 
    spice-gtk
    spice-protocol
    win-virtio
    win-spice
    gnome.adwaita-icon-theme
  ];
  
  virtualisation = {
    libvirtd = {
      enable = true;
      qemu = {
        swtpm.enable = true;
        ovmf.enable = true;
        ovmf.packages = [ pkgs.OVMFFull.fd ];

        verbatimConfig = ''
          namespaces = []
          nographics_allow_host_audio = 1
          user = "cujo"
          group = "kvm"
        '';
      };
    };
    spiceUSBRedirection.enable = true;
  };
  services.spice-vdagentd.enable = true;
}

I am not covering ACS patching in this guide, feel free to look it up if problem occurs in iommu groups being cluttered.

1. Defining Kernel options: 
	
	* Note: Make sure virtualisation is supported by the mobo by checking relevant options in the bios/uefi. 
	
	1. `intel_iommu = on` will be used for intel cpus and `amd_iommu=on` for amd
	   iommu is set to passthrough with iommu=pt
		
		boot.kernelParams = [ "amd_iommu=on" "iommu=pt" ];
		
	2. These are the Kernel Modules that will be needed to make the physical devices such as GPUs to boot with correct drivers 
	   so that it can be further used by vms to passthrough
  	   	
		boot.kernelModules = [ "kvm-amd" "vfio_virqfd" "vfio_pci" "vfio_iommu_type1" "vfio" ];

2 Setting vfio to be active on the correct devices

	1. run `lscpi -nnk` and get the ids of the devices that need to be passthrough
		
		* Note : example of lspci -nnk run  
			
			01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA106M [GeForce RTX 3060 Mobile / Max-Q] [10de:2560] (rev a1)
			        Subsystem: Lenovo Device [17aa:3a80]
			        Kernel driver in use: vfio-pci
			        Kernel modules: nvidiafb, nouveau
			
			01:00.1 Audio device [0403]: NVIDIA Corporation GA106 High Definition Audio Controller [10de:228e] (rev a1)
			        Kernel driver in use: vfio-pci
			        Kernel modules: snd_hda_intel

 			In this both the devices belong to the same IOMMU group which means both the devices need to passed through in virt-manager to have the vm boot
	   
	   Note the ids of the devices (here 10de:2560 & 10de:228e)
	
	2. Using `boot.extraModprobeConfig = '' '';` The following options are given

	     boot.extraModprobeConfig = ''
	     options vfio-pci ids=10de:2560,10de:228e
	     options kvm ignore_msrs=1
	     '';
 	3. The above will just enable the device to boot with vfio but we need the vfio module to be active on the device so to do that we'll be running some commands	
	   with `boot.postBootCommands = '' '';`

		boot.postBootCommands = ''
		    # Enable VFIO on secondary GPU
		    for DEV in "0000:01:00.0" "0000:01:00.1"; do
		      echo "vfio-pci" > /sys/bus/pci/devices/$DEV/driver_override
		    done
		    modprobe -i vfio-pci
		    # Setup Looking Glass shared memory object
		    touch /dev/shm/looking-glass
		    chown cujo:kvm /dev/shm/looking-glass
		    chmod 660 /dev/shm/looking-glass
		  '';
	4. Looking glass is also configured (IVSHMEM with standard memory) https://looking-glass.io





